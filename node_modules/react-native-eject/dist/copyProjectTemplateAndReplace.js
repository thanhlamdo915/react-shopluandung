"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// recovered from https://github.com/react-native-community/cli/pull/1644
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const copyAndReplace_1 = __importDefault(require("./copyAndReplace"));
const promptSync_1 = __importDefault(require("./promptSync"));
const walk_1 = __importDefault(require("@react-native-community/cli/build/tools/walk"));
const cli_tools_1 = require("@react-native-community/cli-tools");
const prompt = (0, promptSync_1.default)();
/**
 * Util for creating a new React Native project.
 * Copy the project from a template and use the correct project name in
 * all files.
 * @param srcPath e.g. '/Users/martin/AwesomeApp/node_modules/react-native/template'
 * @param destPath e.g. '/Users/martin/AwesomeApp'
 * @param newProjectName e.g. 'AwesomeApp'
 * @param options e.g. {
 *          upgrade: true,
 *          force: false,
 *          displayName: 'Hello World',
 *          ignorePaths: ['template/file/to/ignore.md'],
 *        }
 */
function copyProjectTemplateAndReplace(srcPath, destPath, newProjectName, options = {}) {
    if (!srcPath) {
        throw new Error('Need a path to copy from');
    }
    if (!destPath) {
        throw new Error('Need a path to copy to');
    }
    if (!newProjectName) {
        throw new Error('Need a project name');
    }
    (0, walk_1.default)(srcPath).forEach((absoluteSrcFilePath) => {
        // 'react-native upgrade'
        if (options.upgrade) {
            // Don't upgrade these files
            const fileName = path.basename(absoluteSrcFilePath);
            // This also includes __tests__/index.*.js
            if (fileName === 'index.ios.js') {
                return;
            }
            if (fileName === 'index.android.js') {
                return;
            }
            if (fileName === 'index.js') {
                return;
            }
            if (fileName === 'App.js') {
                return;
            }
        }
        const relativeFilePath = translateFilePath(path.relative(srcPath, absoluteSrcFilePath))
            .replace(/HelloWorld/g, newProjectName)
            .replace(/helloworld/g, newProjectName.toLowerCase());
        // Templates may contain files that we don't want to copy.
        // Examples:
        // - Dummy package.json file included in the template only for publishing to npm
        // - Docs specific to the template (.md files)
        if (options.ignorePaths) {
            if (!Array.isArray(options.ignorePaths)) {
                throw new Error('options.ignorePaths must be an array');
            }
            if (options.ignorePaths.some((ignorePath) => ignorePath === relativeFilePath)) {
                // Skip copying this file
                return;
            }
        }
        let contentChangedCallback = null;
        if (options.upgrade && !options.force) {
            contentChangedCallback = (_destPath, contentChanged) => upgradeFileContentChangedCallback(absoluteSrcFilePath, relativeFilePath, contentChanged);
        }
        (0, copyAndReplace_1.default)(absoluteSrcFilePath, path.resolve(destPath, relativeFilePath), {
            'Hello App Display Name': options.displayName || newProjectName,
            HelloWorld: newProjectName,
            helloworld: newProjectName.toLowerCase(),
        }, contentChangedCallback);
    });
}
/**
 * There are various files in the templates folder in the RN repo. We want
 * these to be ignored by tools when working with React Native itself.
 * Example: _babelrc file is ignored by Babel, renamed to .babelrc inside
 *          a real app folder.
 * This is especially important for .gitignore because npm has some special
 * behavior of automatically renaming .gitignore to .npmignore.
 */
function translateFilePath(filePath) {
    if (!filePath) {
        return filePath;
    }
    return filePath
        .replace('_BUCK', 'BUCK')
        .replace('_gitignore', '.gitignore')
        .replace('_gitattributes', '.gitattributes')
        .replace('_babelrc', '.babelrc')
        .replace('_editorconfig', '.editorconfig')
        .replace('_eslintrc.js', '.eslintrc.js')
        .replace('_flowconfig', '.flowconfig')
        .replace('_buckconfig', '.buckconfig')
        .replace('_prettierrc.js', '.prettierrc.js')
        .replace('_bundle', '.bundle')
        .replace('_ruby-version', '.ruby-version')
        .replace('_node-version', '.node-version')
        .replace('_watchmanconfig', '.watchmanconfig')
        .replace('_xcode.env', '.xcode.env');
}
function upgradeFileContentChangedCallback(absoluteSrcFilePath, relativeDestPath, contentChanged) {
    if (contentChanged === 'new') {
        cli_tools_1.logger.info(`${chalk_1.default.bold('new')} ${relativeDestPath}`);
        return 'overwrite';
    }
    if (contentChanged === 'changed') {
        cli_tools_1.logger.info(`${chalk_1.default.bold(relativeDestPath)} ` +
            `has changed in the new version.\nDo you want to keep your ${relativeDestPath} or replace it with the ` +
            'latest version?\nIf you ever made any changes ' +
            "to this file, you'll probably want to keep it.\n" +
            `You can see the new version here: ${absoluteSrcFilePath}\n` +
            `Do you want to replace ${relativeDestPath}? ` +
            'Answer y to replace, n to keep your version: ');
        const answer = prompt();
        if (answer === 'y') {
            cli_tools_1.logger.info(`Replacing ${relativeDestPath}`);
            return 'overwrite';
        }
        cli_tools_1.logger.info(`Keeping your ${relativeDestPath}`);
        return 'keep';
    }
    if (contentChanged === 'identical') {
        return 'keep';
    }
    throw new Error(`Unknown file changed state: ${relativeDestPath}, ${contentChanged}`);
}
exports.default = copyProjectTemplateAndReplace;
